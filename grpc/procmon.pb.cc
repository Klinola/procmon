// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: procmon.proto
// Protobuf C++ Version: 5.27.3

#include "procmon.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace procmon {

inline constexpr StatusResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : net_interface_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cpu_usage_{0},
        mem_usage_{0},
        total_memory_{0},
        free_memory_{0},
        rx_bytes_{::int64_t{0}},
        tx_bytes_{::int64_t{0}},
        d_speed_{0},
        u_speed_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StatusResponse::StatusResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusResponseDefaultTypeInternal() {}
  union {
    StatusResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR StatusRequest::StatusRequest(::_pbi::ConstantInitialized) {}
struct StatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusRequestDefaultTypeInternal() {}
  union {
    StatusRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusRequestDefaultTypeInternal _StatusRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR NftTrafficRequest::NftTrafficRequest(::_pbi::ConstantInitialized) {}
struct NftTrafficRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NftTrafficRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NftTrafficRequestDefaultTypeInternal() {}
  union {
    NftTrafficRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NftTrafficRequestDefaultTypeInternal _NftTrafficRequest_default_instance_;

inline constexpr NftTraffic::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : timestamp_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ip_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mac_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        packets_{0},
        bytes_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NftTraffic::NftTraffic(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NftTrafficDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NftTrafficDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NftTrafficDefaultTypeInternal() {}
  union {
    NftTraffic _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NftTrafficDefaultTypeInternal _NftTraffic_default_instance_;

inline constexpr NftTrafficResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : nft_traffic_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NftTrafficResponse::NftTrafficResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NftTrafficResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NftTrafficResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NftTrafficResponseDefaultTypeInternal() {}
  union {
    NftTrafficResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NftTrafficResponseDefaultTypeInternal _NftTrafficResponse_default_instance_;
}  // namespace procmon
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_procmon_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_procmon_2eproto = nullptr;
const ::uint32_t
    TableStruct_procmon_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::procmon::StatusRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::procmon::StatusResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::procmon::StatusResponse, _impl_.cpu_usage_),
        PROTOBUF_FIELD_OFFSET(::procmon::StatusResponse, _impl_.mem_usage_),
        PROTOBUF_FIELD_OFFSET(::procmon::StatusResponse, _impl_.total_memory_),
        PROTOBUF_FIELD_OFFSET(::procmon::StatusResponse, _impl_.free_memory_),
        PROTOBUF_FIELD_OFFSET(::procmon::StatusResponse, _impl_.net_interface_),
        PROTOBUF_FIELD_OFFSET(::procmon::StatusResponse, _impl_.rx_bytes_),
        PROTOBUF_FIELD_OFFSET(::procmon::StatusResponse, _impl_.tx_bytes_),
        PROTOBUF_FIELD_OFFSET(::procmon::StatusResponse, _impl_.d_speed_),
        PROTOBUF_FIELD_OFFSET(::procmon::StatusResponse, _impl_.u_speed_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::procmon::NftTrafficRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::procmon::NftTrafficResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::procmon::NftTrafficResponse, _impl_.nft_traffic_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::procmon::NftTraffic, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::procmon::NftTraffic, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::procmon::NftTraffic, _impl_.ip_address_),
        PROTOBUF_FIELD_OFFSET(::procmon::NftTraffic, _impl_.mac_address_),
        PROTOBUF_FIELD_OFFSET(::procmon::NftTraffic, _impl_.packets_),
        PROTOBUF_FIELD_OFFSET(::procmon::NftTraffic, _impl_.bytes_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::procmon::StatusRequest)},
        {8, -1, -1, sizeof(::procmon::StatusResponse)},
        {25, -1, -1, sizeof(::procmon::NftTrafficRequest)},
        {33, -1, -1, sizeof(::procmon::NftTrafficResponse)},
        {42, -1, -1, sizeof(::procmon::NftTraffic)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::procmon::_StatusRequest_default_instance_._instance,
    &::procmon::_StatusResponse_default_instance_._instance,
    &::procmon::_NftTrafficRequest_default_instance_._instance,
    &::procmon::_NftTrafficResponse_default_instance_._instance,
    &::procmon::_NftTraffic_default_instance_._instance,
};
const char descriptor_table_protodef_procmon_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\rprocmon.proto\022\007procmon\"\017\n\rStatusReques"
    "t\"\276\001\n\016StatusResponse\022\021\n\tcpu_usage\030\001 \001(\001\022"
    "\021\n\tmem_usage\030\002 \001(\001\022\024\n\014total_memory\030\003 \001(\001"
    "\022\023\n\013free_memory\030\004 \001(\001\022\025\n\rnet_interface\030\005"
    " \001(\t\022\020\n\010rx_bytes\030\006 \001(\003\022\020\n\010tx_bytes\030\007 \001(\003"
    "\022\017\n\007d_speed\030\010 \001(\001\022\017\n\007u_speed\030\t \001(\001\"\023\n\021Nf"
    "tTrafficRequest\">\n\022NftTrafficResponse\022(\n"
    "\013nft_traffic\030\001 \003(\0132\023.procmon.NftTraffic\""
    "h\n\nNftTraffic\022\021\n\ttimestamp\030\001 \001(\t\022\022\n\nip_a"
    "ddress\030\002 \001(\t\022\023\n\013mac_address\030\003 \001(\t\022\017\n\007pac"
    "kets\030\004 \001(\005\022\r\n\005bytes\030\005 \001(\0052\236\001\n\016ProcmonSer"
    "vice\022B\n\017GetSystemStatus\022\026.procmon.Status"
    "Request\032\027.procmon.StatusResponse\022H\n\rGetN"
    "ftTraffic\022\032.procmon.NftTrafficRequest\032\033."
    "procmon.NftTrafficResponseb\006proto3"
};
static ::absl::once_flag descriptor_table_procmon_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_procmon_2eproto = {
    false,
    false,
    594,
    descriptor_table_protodef_procmon_2eproto,
    "procmon.proto",
    &descriptor_table_procmon_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_procmon_2eproto::offsets,
    file_level_enum_descriptors_procmon_2eproto,
    file_level_service_descriptors_procmon_2eproto,
};
namespace procmon {
// ===================================================================

class StatusRequest::_Internal {
 public:
};

StatusRequest::StatusRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:procmon.StatusRequest)
}
StatusRequest::StatusRequest(
    ::google::protobuf::Arena* arena,
    const StatusRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  StatusRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:procmon.StatusRequest)
}

const ::google::protobuf::MessageLite::ClassData*
StatusRequest::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(StatusRequest, _impl_._cached_size_),
              false,
          },
          &StatusRequest::MergeImpl,
          &StatusRequest::kDescriptorMethods,
          &descriptor_table_procmon_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> StatusRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_StatusRequest_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::procmon::StatusRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};









::google::protobuf::Metadata StatusRequest::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class StatusResponse::_Internal {
 public:
};

StatusResponse::StatusResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:procmon.StatusResponse)
}
inline PROTOBUF_NDEBUG_INLINE StatusResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::procmon::StatusResponse& from_msg)
      : net_interface_(arena, from.net_interface_),
        _cached_size_{0} {}

StatusResponse::StatusResponse(
    ::google::protobuf::Arena* arena,
    const StatusResponse& from)
    : ::google::protobuf::Message(arena) {
  StatusResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, cpu_usage_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, cpu_usage_),
           offsetof(Impl_, u_speed_) -
               offsetof(Impl_, cpu_usage_) +
               sizeof(Impl_::u_speed_));

  // @@protoc_insertion_point(copy_constructor:procmon.StatusResponse)
}
inline PROTOBUF_NDEBUG_INLINE StatusResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : net_interface_(arena),
        _cached_size_{0} {}

inline void StatusResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, cpu_usage_),
           0,
           offsetof(Impl_, u_speed_) -
               offsetof(Impl_, cpu_usage_) +
               sizeof(Impl_::u_speed_));
}
StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:procmon.StatusResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StatusResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.net_interface_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
StatusResponse::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_._cached_size_),
              false,
          },
          &StatusResponse::MergeImpl,
          &StatusResponse::kDescriptorMethods,
          &descriptor_table_procmon_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 0, 52, 2> StatusResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_StatusResponse_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::procmon::StatusResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double cpu_usage = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_.cpu_usage_)}},
    // double mem_usage = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_.mem_usage_)}},
    // double total_memory = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_.total_memory_)}},
    // double free_memory = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_.free_memory_)}},
    // string net_interface = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_.net_interface_)}},
    // int64 rx_bytes = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(StatusResponse, _impl_.rx_bytes_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_.rx_bytes_)}},
    // int64 tx_bytes = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(StatusResponse, _impl_.tx_bytes_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_.tx_bytes_)}},
    // double d_speed = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_.d_speed_)}},
    // double u_speed = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 63, 0, PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_.u_speed_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // double cpu_usage = 1;
    {PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_.cpu_usage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double mem_usage = 2;
    {PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_.mem_usage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double total_memory = 3;
    {PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_.total_memory_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double free_memory = 4;
    {PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_.free_memory_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string net_interface = 5;
    {PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_.net_interface_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 rx_bytes = 6;
    {PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_.rx_bytes_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 tx_bytes = 7;
    {PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_.tx_bytes_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // double d_speed = 8;
    {PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_.d_speed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double u_speed = 9;
    {PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_.u_speed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\26\0\0\0\0\15\0\0\0\0\0\0\0\0\0\0"
    "procmon.StatusResponse"
    "net_interface"
  }},
};

PROTOBUF_NOINLINE void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:procmon.StatusResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.net_interface_.ClearToEmpty();
  ::memset(&_impl_.cpu_usage_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.u_speed_) -
      reinterpret_cast<char*>(&_impl_.cpu_usage_)) + sizeof(_impl_.u_speed_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* StatusResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:procmon.StatusResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double cpu_usage = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_cpu_usage = this->_internal_cpu_usage();
  ::uint64_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_cpu_usage(), target);
  }

  // double mem_usage = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_mem_usage = this->_internal_mem_usage();
  ::uint64_t raw_mem_usage;
  memcpy(&raw_mem_usage, &tmp_mem_usage, sizeof(tmp_mem_usage));
  if (raw_mem_usage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_mem_usage(), target);
  }

  // double total_memory = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_total_memory = this->_internal_total_memory();
  ::uint64_t raw_total_memory;
  memcpy(&raw_total_memory, &tmp_total_memory, sizeof(tmp_total_memory));
  if (raw_total_memory != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_total_memory(), target);
  }

  // double free_memory = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_free_memory = this->_internal_free_memory();
  ::uint64_t raw_free_memory;
  memcpy(&raw_free_memory, &tmp_free_memory, sizeof(tmp_free_memory));
  if (raw_free_memory != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_free_memory(), target);
  }

  // string net_interface = 5;
  if (!this->_internal_net_interface().empty()) {
    const std::string& _s = this->_internal_net_interface();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "procmon.StatusResponse.net_interface");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // int64 rx_bytes = 6;
  if (this->_internal_rx_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<6>(
            stream, this->_internal_rx_bytes(), target);
  }

  // int64 tx_bytes = 7;
  if (this->_internal_tx_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<7>(
            stream, this->_internal_tx_bytes(), target);
  }

  // double d_speed = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_d_speed = this->_internal_d_speed();
  ::uint64_t raw_d_speed;
  memcpy(&raw_d_speed, &tmp_d_speed, sizeof(tmp_d_speed));
  if (raw_d_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_d_speed(), target);
  }

  // double u_speed = 9;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_u_speed = this->_internal_u_speed();
  ::uint64_t raw_u_speed;
  memcpy(&raw_u_speed, &tmp_u_speed, sizeof(tmp_u_speed));
  if (raw_u_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        9, this->_internal_u_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:procmon.StatusResponse)
  return target;
}

::size_t StatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:procmon.StatusResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string net_interface = 5;
  if (!this->_internal_net_interface().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_net_interface());
  }

  // double cpu_usage = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_cpu_usage = this->_internal_cpu_usage();
  ::uint64_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    total_size += 9;
  }

  // double mem_usage = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_mem_usage = this->_internal_mem_usage();
  ::uint64_t raw_mem_usage;
  memcpy(&raw_mem_usage, &tmp_mem_usage, sizeof(tmp_mem_usage));
  if (raw_mem_usage != 0) {
    total_size += 9;
  }

  // double total_memory = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_total_memory = this->_internal_total_memory();
  ::uint64_t raw_total_memory;
  memcpy(&raw_total_memory, &tmp_total_memory, sizeof(tmp_total_memory));
  if (raw_total_memory != 0) {
    total_size += 9;
  }

  // double free_memory = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_free_memory = this->_internal_free_memory();
  ::uint64_t raw_free_memory;
  memcpy(&raw_free_memory, &tmp_free_memory, sizeof(tmp_free_memory));
  if (raw_free_memory != 0) {
    total_size += 9;
  }

  // int64 rx_bytes = 6;
  if (this->_internal_rx_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_rx_bytes());
  }

  // int64 tx_bytes = 7;
  if (this->_internal_tx_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_tx_bytes());
  }

  // double d_speed = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_d_speed = this->_internal_d_speed();
  ::uint64_t raw_d_speed;
  memcpy(&raw_d_speed, &tmp_d_speed, sizeof(tmp_d_speed));
  if (raw_d_speed != 0) {
    total_size += 9;
  }

  // double u_speed = 9;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_u_speed = this->_internal_u_speed();
  ::uint64_t raw_u_speed;
  memcpy(&raw_u_speed, &tmp_u_speed, sizeof(tmp_u_speed));
  if (raw_u_speed != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void StatusResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StatusResponse*>(&to_msg);
  auto& from = static_cast<const StatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:procmon.StatusResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_net_interface().empty()) {
    _this->_internal_set_net_interface(from._internal_net_interface());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_cpu_usage = from._internal_cpu_usage();
  ::uint64_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    _this->_impl_.cpu_usage_ = from._impl_.cpu_usage_;
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_mem_usage = from._internal_mem_usage();
  ::uint64_t raw_mem_usage;
  memcpy(&raw_mem_usage, &tmp_mem_usage, sizeof(tmp_mem_usage));
  if (raw_mem_usage != 0) {
    _this->_impl_.mem_usage_ = from._impl_.mem_usage_;
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_total_memory = from._internal_total_memory();
  ::uint64_t raw_total_memory;
  memcpy(&raw_total_memory, &tmp_total_memory, sizeof(tmp_total_memory));
  if (raw_total_memory != 0) {
    _this->_impl_.total_memory_ = from._impl_.total_memory_;
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_free_memory = from._internal_free_memory();
  ::uint64_t raw_free_memory;
  memcpy(&raw_free_memory, &tmp_free_memory, sizeof(tmp_free_memory));
  if (raw_free_memory != 0) {
    _this->_impl_.free_memory_ = from._impl_.free_memory_;
  }
  if (from._internal_rx_bytes() != 0) {
    _this->_impl_.rx_bytes_ = from._impl_.rx_bytes_;
  }
  if (from._internal_tx_bytes() != 0) {
    _this->_impl_.tx_bytes_ = from._impl_.tx_bytes_;
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_d_speed = from._internal_d_speed();
  ::uint64_t raw_d_speed;
  memcpy(&raw_d_speed, &tmp_d_speed, sizeof(tmp_d_speed));
  if (raw_d_speed != 0) {
    _this->_impl_.d_speed_ = from._impl_.d_speed_;
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_u_speed = from._internal_u_speed();
  ::uint64_t raw_u_speed;
  memcpy(&raw_u_speed, &tmp_u_speed, sizeof(tmp_u_speed));
  if (raw_u_speed != 0) {
    _this->_impl_.u_speed_ = from._impl_.u_speed_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:procmon.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StatusResponse::InternalSwap(StatusResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.net_interface_, &other->_impl_.net_interface_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_.u_speed_)
      + sizeof(StatusResponse::_impl_.u_speed_)
      - PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_.cpu_usage_)>(
          reinterpret_cast<char*>(&_impl_.cpu_usage_),
          reinterpret_cast<char*>(&other->_impl_.cpu_usage_));
}

::google::protobuf::Metadata StatusResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NftTrafficRequest::_Internal {
 public:
};

NftTrafficRequest::NftTrafficRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:procmon.NftTrafficRequest)
}
NftTrafficRequest::NftTrafficRequest(
    ::google::protobuf::Arena* arena,
    const NftTrafficRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  NftTrafficRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:procmon.NftTrafficRequest)
}

const ::google::protobuf::MessageLite::ClassData*
NftTrafficRequest::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NftTrafficRequest, _impl_._cached_size_),
              false,
          },
          &NftTrafficRequest::MergeImpl,
          &NftTrafficRequest::kDescriptorMethods,
          &descriptor_table_procmon_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> NftTrafficRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NftTrafficRequest_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::procmon::NftTrafficRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};









::google::protobuf::Metadata NftTrafficRequest::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NftTrafficResponse::_Internal {
 public:
};

NftTrafficResponse::NftTrafficResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:procmon.NftTrafficResponse)
}
inline PROTOBUF_NDEBUG_INLINE NftTrafficResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::procmon::NftTrafficResponse& from_msg)
      : nft_traffic_{visibility, arena, from.nft_traffic_},
        _cached_size_{0} {}

NftTrafficResponse::NftTrafficResponse(
    ::google::protobuf::Arena* arena,
    const NftTrafficResponse& from)
    : ::google::protobuf::Message(arena) {
  NftTrafficResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:procmon.NftTrafficResponse)
}
inline PROTOBUF_NDEBUG_INLINE NftTrafficResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : nft_traffic_{visibility, arena},
        _cached_size_{0} {}

inline void NftTrafficResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
NftTrafficResponse::~NftTrafficResponse() {
  // @@protoc_insertion_point(destructor:procmon.NftTrafficResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NftTrafficResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
NftTrafficResponse::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NftTrafficResponse, _impl_._cached_size_),
              false,
          },
          &NftTrafficResponse::MergeImpl,
          &NftTrafficResponse::kDescriptorMethods,
          &descriptor_table_procmon_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> NftTrafficResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_NftTrafficResponse_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::procmon::NftTrafficResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .procmon.NftTraffic nft_traffic = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(NftTrafficResponse, _impl_.nft_traffic_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .procmon.NftTraffic nft_traffic = 1;
    {PROTOBUF_FIELD_OFFSET(NftTrafficResponse, _impl_.nft_traffic_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::procmon::NftTraffic>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void NftTrafficResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:procmon.NftTrafficResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nft_traffic_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* NftTrafficResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:procmon.NftTrafficResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .procmon.NftTraffic nft_traffic = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_nft_traffic_size());
       i < n; i++) {
    const auto& repfield = this->_internal_nft_traffic().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:procmon.NftTrafficResponse)
  return target;
}

::size_t NftTrafficResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:procmon.NftTrafficResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .procmon.NftTraffic nft_traffic = 1;
  total_size += 1UL * this->_internal_nft_traffic_size();
  for (const auto& msg : this->_internal_nft_traffic()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NftTrafficResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NftTrafficResponse*>(&to_msg);
  auto& from = static_cast<const NftTrafficResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:procmon.NftTrafficResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_nft_traffic()->MergeFrom(
      from._internal_nft_traffic());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NftTrafficResponse::CopyFrom(const NftTrafficResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:procmon.NftTrafficResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NftTrafficResponse::InternalSwap(NftTrafficResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nft_traffic_.InternalSwap(&other->_impl_.nft_traffic_);
}

::google::protobuf::Metadata NftTrafficResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NftTraffic::_Internal {
 public:
};

NftTraffic::NftTraffic(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:procmon.NftTraffic)
}
inline PROTOBUF_NDEBUG_INLINE NftTraffic::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::procmon::NftTraffic& from_msg)
      : timestamp_(arena, from.timestamp_),
        ip_address_(arena, from.ip_address_),
        mac_address_(arena, from.mac_address_),
        _cached_size_{0} {}

NftTraffic::NftTraffic(
    ::google::protobuf::Arena* arena,
    const NftTraffic& from)
    : ::google::protobuf::Message(arena) {
  NftTraffic* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, packets_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, packets_),
           offsetof(Impl_, bytes_) -
               offsetof(Impl_, packets_) +
               sizeof(Impl_::bytes_));

  // @@protoc_insertion_point(copy_constructor:procmon.NftTraffic)
}
inline PROTOBUF_NDEBUG_INLINE NftTraffic::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : timestamp_(arena),
        ip_address_(arena),
        mac_address_(arena),
        _cached_size_{0} {}

inline void NftTraffic::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, packets_),
           0,
           offsetof(Impl_, bytes_) -
               offsetof(Impl_, packets_) +
               sizeof(Impl_::bytes_));
}
NftTraffic::~NftTraffic() {
  // @@protoc_insertion_point(destructor:procmon.NftTraffic)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NftTraffic::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.timestamp_.Destroy();
  _impl_.ip_address_.Destroy();
  _impl_.mac_address_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
NftTraffic::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NftTraffic, _impl_._cached_size_),
              false,
          },
          &NftTraffic::MergeImpl,
          &NftTraffic::kDescriptorMethods,
          &descriptor_table_procmon_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 57, 2> NftTraffic::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NftTraffic_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::procmon::NftTraffic>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string timestamp = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(NftTraffic, _impl_.timestamp_)}},
    // string ip_address = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(NftTraffic, _impl_.ip_address_)}},
    // string mac_address = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(NftTraffic, _impl_.mac_address_)}},
    // int32 packets = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NftTraffic, _impl_.packets_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(NftTraffic, _impl_.packets_)}},
    // int32 bytes = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NftTraffic, _impl_.bytes_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(NftTraffic, _impl_.bytes_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(NftTraffic, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ip_address = 2;
    {PROTOBUF_FIELD_OFFSET(NftTraffic, _impl_.ip_address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string mac_address = 3;
    {PROTOBUF_FIELD_OFFSET(NftTraffic, _impl_.mac_address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 packets = 4;
    {PROTOBUF_FIELD_OFFSET(NftTraffic, _impl_.packets_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 bytes = 5;
    {PROTOBUF_FIELD_OFFSET(NftTraffic, _impl_.bytes_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\22\11\12\13\0\0\0\0"
    "procmon.NftTraffic"
    "timestamp"
    "ip_address"
    "mac_address"
  }},
};

PROTOBUF_NOINLINE void NftTraffic::Clear() {
// @@protoc_insertion_point(message_clear_start:procmon.NftTraffic)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timestamp_.ClearToEmpty();
  _impl_.ip_address_.ClearToEmpty();
  _impl_.mac_address_.ClearToEmpty();
  ::memset(&_impl_.packets_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.bytes_) -
      reinterpret_cast<char*>(&_impl_.packets_)) + sizeof(_impl_.bytes_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* NftTraffic::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:procmon.NftTraffic)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string timestamp = 1;
  if (!this->_internal_timestamp().empty()) {
    const std::string& _s = this->_internal_timestamp();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "procmon.NftTraffic.timestamp");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string ip_address = 2;
  if (!this->_internal_ip_address().empty()) {
    const std::string& _s = this->_internal_ip_address();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "procmon.NftTraffic.ip_address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string mac_address = 3;
  if (!this->_internal_mac_address().empty()) {
    const std::string& _s = this->_internal_mac_address();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "procmon.NftTraffic.mac_address");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int32 packets = 4;
  if (this->_internal_packets() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_packets(), target);
  }

  // int32 bytes = 5;
  if (this->_internal_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:procmon.NftTraffic)
  return target;
}

::size_t NftTraffic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:procmon.NftTraffic)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string timestamp = 1;
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_timestamp());
  }

  // string ip_address = 2;
  if (!this->_internal_ip_address().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ip_address());
  }

  // string mac_address = 3;
  if (!this->_internal_mac_address().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_mac_address());
  }

  // int32 packets = 4;
  if (this->_internal_packets() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_packets());
  }

  // int32 bytes = 5;
  if (this->_internal_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NftTraffic::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NftTraffic*>(&to_msg);
  auto& from = static_cast<const NftTraffic&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:procmon.NftTraffic)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (!from._internal_ip_address().empty()) {
    _this->_internal_set_ip_address(from._internal_ip_address());
  }
  if (!from._internal_mac_address().empty()) {
    _this->_internal_set_mac_address(from._internal_mac_address());
  }
  if (from._internal_packets() != 0) {
    _this->_impl_.packets_ = from._impl_.packets_;
  }
  if (from._internal_bytes() != 0) {
    _this->_impl_.bytes_ = from._impl_.bytes_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NftTraffic::CopyFrom(const NftTraffic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:procmon.NftTraffic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NftTraffic::InternalSwap(NftTraffic* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, &other->_impl_.timestamp_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_address_, &other->_impl_.ip_address_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mac_address_, &other->_impl_.mac_address_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NftTraffic, _impl_.bytes_)
      + sizeof(NftTraffic::_impl_.bytes_)
      - PROTOBUF_FIELD_OFFSET(NftTraffic, _impl_.packets_)>(
          reinterpret_cast<char*>(&_impl_.packets_),
          reinterpret_cast<char*>(&other->_impl_.packets_));
}

::google::protobuf::Metadata NftTraffic::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace procmon
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_procmon_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
